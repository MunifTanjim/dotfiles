# vim: set filetype=zsh foldmethod=marker foldmarker=[[[,]]] :

# [[[ options
setopt COMBINING_CHARS
setopt INTERACTIVE_COMMENTS
setopt RC_QUOTES

setopt APPEND_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt SHARE_HISTORY
setopt HIST_VERIFY

setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_SILENT
setopt PUSHD_TO_HOME

setopt AUTO_MENU
setopt GLOB_COMPLETE
setopt LIST_ROWS_FIRST

unsetopt MULTIOS
# options ]]]

autoload -U select-word-style
select-word-style bash

# [[[ completion
zstyle ':completion:*' menu select=2
zstyle ':completion:*' group-name ''
zstyle ':completion:::::' completer _expand _expand_alias _complete _ignored _correct _approximate
zstyle ':completion:*' squeeze-slashes true

zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle '*' single-ignored 'show'

zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${ZSH_CACHE_DIR}/zcompcache"

zstyle ':completion:*:corrections' format '%B%d%b (%e errors)'
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%B%F{yellow}%d%f%b'
zstyle ':completion:*:warnings' format '%B%F{red}No matches found!%f%b'
# completion ]]]

source "${ZED[DATA_DIR]}/self/zed.zsh"

zed init

fpath+="${DOTFILES_MODULES}/zsh/completions"
fpath+="${ZSH_DATA_DIR}/completions"

zed load github.com/zsh-users/zsh-completions

zed load github.com/trapd00r/LS_COLORS \
  onpull:'dircolors -b LS_COLORS > LS_COLORS.plugin.zsh' \
  onload:'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zed load github.com/zpm-zsh/colorize
zed load github.com/zpm-zsh/ls

if (( ${+commands[zoxide]} )); then
  zed load github.com/MunifTanjim/null name:'zoxide' \
    onpull:'zoxide init --no-aliases zsh > zoxide.plugin.zsh && echo "z() { __zoxide_z \$@ }" >> zoxide.plugin.zsh'
fi

zed load "${DOTFILES_MODULES}/aliases.sh"
zed load "${DOTFILES_MODULES}/helpers.sh"
{{ if eq .chezmoi.os "darwin" -}}
  zed load "${DOTFILES_MODULES}/os.darwin.plugin.sh"
{{ end -}}
zed load "${DOTFILES_MODULES}/gpg.plugin.sh"

zed load "${DOTFILES_MODULES}/fzf.plugin.sh"
zed load "${DOTFILES_MODULES}/go.plugin.sh"
zed load "${DOTFILES_MODULES}/lf.plugin.sh"
zed load "${DOTFILES_MODULES}/node.plugin.sh" \
  onload:'__init_nvm'
zed load "${DOTFILES_MODULES}/python.plugin.sh"
zed load "${DOTFILES_MODULES}/ruby.plugin.sh"
zed load "${DOTFILES_MODULES}/rust.plugin.sh"

# [[[ zle utilities
zle--change-cursor() {
  local -r style="${1}"
  local -r cursor="\x1b[%s q"
  if [[ "${style}" == "beam" ]]; then
    printf "${cursor}" 6
  elif [[ "${style}" == "block" ]]; then
    printf "${cursor}" 2
  fi
}
# zle utilities ]]]

# [[[ zle-keymap-select
zle-keymap-select() {
  if [[ $KEYMAP == "vicmd" ]]; then
    zle--change-cursor "block"
  else
    zle--change-cursor "beam"
  fi
  zle -R
}
zle -N zle-keymap-select
# zle-keymap-select ]]]

# [[[ zle-line-{init,finish}
zle-line-init () {
  zle--change-cursor "beam"
  printf '%s' ${terminfo[smkx]}
}
zle -N zle-line-init

zle-line-finish () {
  printf '%s' ${terminfo[rmkx]}
}
zle -N zle-line-finish
# zle-line-{init-finish} ]]]

# [[[ keybindings
export KEYTIMEOUT=10

declare -g -A key=(
  Up                "${terminfo[kcuu1]}"
  Down              "${terminfo[kcud1]}"
  Left              "${terminfo[kcub1]}"
  Right             "${terminfo[kcuf1]}"
  Home              "${terminfo[khome]}"
  End               "${terminfo[kend]}"
  PageUp            "${terminfo[kpp]}"
  PageDown          "${terminfo[knp]}"
  Insert            "${terminfo[kich1]}"
  Delete            "${terminfo[kdch1]}"
  BackSpace         "${terminfo[kbs]}"
  Control-Left      "^[[1;5D"
  Control-Right     "^[[1;5C"
  Control-Delete    "^[[3;5~"
  Control-Backspace "^H"
  Shift-Tab         "${terminfo[kcbt]}"
)

bindkey -v

autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

bindkey "${key[Up]}" up-line-or-beginning-search
bindkey "${key[Down]}" down-line-or-beginning-search
bindkey "${key[Control-Left]}"  backward-word
bindkey "${key[Control-Right]}" forward-word
bindkey "${key[Control-Backspace]}" backward-kill-word
bindkey "${key[Control-Delete]}" kill-word
bindkey "${key[Shift-Tab]}" reverse-menu-complete
# keybindings ]]]

{{ if eq .chezmoi.os "darwin" -}}
  zed load github.com/ohmyzsh/ohmyzsh dir:'plugins/macos'
{{ end -}}

zed load github.com/momo-lab/auto-expand-alias
zed load github.com/zsh-users/zsh-autosuggestions
zed load github.com/zdharma-mirror/fast-syntax-highlighting

export STARSHIP_CONFIG=~/.config/starship/config.toml
if (( ${+commands[starship]} )); then
  zed load github.com/MunifTanjim/null name:'starship' \
    onpull:'starship init zsh --print-full-init > starship.plugin.zsh'
fi

zed done
