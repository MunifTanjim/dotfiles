# vim: set filetype=zsh foldmethod=marker foldmarker=[[[,]]] :

# [[[ options
setopt AUTO_PARAM_SLASH
setopt COMBINING_CHARS
setopt INTERACTIVE_COMMENTS

setopt APPEND_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_VERIFY
setopt SHARE_HISTORY

setopt AUTO_CD
setopt AUTO_PUSHD

setopt ALWAYS_TO_END
setopt AUTO_MENU
setopt COMPLETE_IN_WORD
setopt GLOB_COMPLETE
setopt LIST_ROWS_FIRST

unsetopt MULTIOS
# options ]]]

declare -U path

autoload -U select-word-style
select-word-style bash

# [[[ completion
zstyle ':completion:*' verbose yes
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${ZSH_CACHE_DIR}/zcompcache"

zstyle ':completion:*' completer _expand_alias _complete _ignored _correct _approximate

zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*' squeeze-slashes true

zstyle -e ':completion:*' special-dirs \
  '[[ $PREFIX = (../)#(|.|..) ]] && reply=(..)'

zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'
zstyle ':completion:*' single-ignored show

zstyle ':completion:*:corrections' format '%B%d%b (~%e errors)'
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%B%F{yellow}%d%f%b'
zstyle ':completion:*:warnings' format '%B%F{red}(no match found)%f%b'
# completion ]]]

declare -A ZED
ZED[CACHE_DIR]="${ZSH_CACHE_DIR}/.zed"
ZED[DATA_DIR]="${ZSH_DATA_DIR}/.zed"

source "${ZED[DATA_DIR]}/self/zed.zsh"

zed init

fpath+="${DOTFILES_MODULES}/zsh/completions"
fpath+="${ZSH_DATA_DIR}/completions"

zed load github.com/zsh-users/zsh-completions

zed load github.com/trapd00r/LS_COLORS \
  onpull:'dircolors -b LS_COLORS > LS_COLORS.plugin.zsh' \
  onload:'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zed load github.com/zpm-zsh/colorize
zed load github.com/zpm-zsh/ls

zed load "${DOTFILES_MODULES}/aliases.sh"
zed load "${DOTFILES_MODULES}/helpers.sh"
{{ if eq .chezmoi.os "darwin" -}}
  zed load "${DOTFILES_MODULES}/zsh/plugins/os.darwin" \
    onpull:'./generate.sh'
{{ end -}}
zed load "${DOTFILES_MODULES}/gpg.plugin.sh"

zed load "${DOTFILES_MODULES}/fnm.plugin.sh" name:'fnm'
zed load "${DOTFILES_MODULES}/fzf.plugin.sh"
zed load "${DOTFILES_MODULES}/go.plugin.sh"
zed load "${DOTFILES_MODULES}/lf.plugin.sh"
zed load github.com/MunifTanjim/luver
zed load "${DOTFILES_MODULES}/zsh/plugins/pyenv" \
  compile:'pyenv.plugin.zsh _generated.zsh' \
  onpull:'./generate.sh'
zed load "${DOTFILES_MODULES}/zsh/plugins/rbenv" \
  compile:'rbenv.plugin.zsh _generated.zsh' \
  onpull:'./generate.sh'
zed load "${DOTFILES_MODULES}/rust.plugin.sh"

zed load "${DOTFILES_MODULES}/machine.local.plugin.sh"

# [[[ zle utilities

# 1,3,5 -> (w/  blink) block,underline,bar
# 2,4,6 -> (w/o blink) block,underline,bar
function zle--change-cursor() {
  local -r style="${1}"
  local -r cursor="\x1b[%s q"
  if [[ "${style}" == "bar" ]]; then
    printf "${cursor}" 5
  elif [[ "${style}" == "block" ]]; then
    printf "${cursor}" 1
  elif [[ "${style}" == "underline" ]]; then
    printf "${cursor}" 3
  fi
}
# zle utilities ]]]

# [[[ zle-keymap-select
function zle-keymap-select() {
  if [[ $KEYMAP == "vicmd" ]]; then
    zle--change-cursor "block"
  else
    zle--change-cursor "bar"
  fi
  zle -R
}
zle -N zle-keymap-select
# zle-keymap-select ]]]

# [[[ zle-line-{init,finish}
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init () {
    zle--change-cursor "bar"
    printf '%s' ${terminfo[smkx]}
  }
  zle -N zle-line-init

  function zle-line-finish () {
    printf '%s' ${terminfo[rmkx]}
  }
  zle -N zle-line-finish
fi
# zle-line-{init-finish} ]]]

# [[[ keybindings
export KEYTIMEOUT=10

declare -gA key=(
  Up                "${terminfo[kcuu1]}"
  Down              "${terminfo[kcud1]}"
  Left              "${terminfo[kcub1]}"
  Right             "${terminfo[kcuf1]}"
  Home              "${terminfo[khome]}"
  End               "${terminfo[kend]}"
  PageUp            "${terminfo[kpp]}"
  PageDown          "${terminfo[knp]}"
  Insert            "${terminfo[kich1]}"
  Delete            "${terminfo[kdch1]}"
  BackSpace         "${terminfo[kbs]}"
  Control-Left      "^[[1;5D"
  Control-Right     "^[[1;5C"
  Control-Delete    "^[[3;5~"
  Control-Backspace "^H"
  Shift-Tab         "${terminfo[kcbt]}"
)

bindkey -v

autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

bindkey "${key[Up]}" up-line-or-beginning-search
bindkey "${key[Down]}" down-line-or-beginning-search
bindkey "${key[Control-Left]}"  backward-word
bindkey "${key[Control-Right]}" forward-word
bindkey "${key[Control-Backspace]}" backward-kill-word
bindkey "${key[Control-Delete]}" kill-word
bindkey "${key[Shift-Tab]}" reverse-menu-complete
# keybindings ]]]

if (( ${+commands[zoxide]} )); then
  zed load github.com/MunifTanjim/null name:'zoxide' \
    onpull:'zoxide init zsh --no-cmd > zoxide.plugin.zsh && echo "z() { __zoxide_z \$@ }" >> zoxide.plugin.zsh'
fi

{{ if eq .chezmoi.os "darwin" -}}
  zed load github.com/ohmyzsh/ohmyzsh dir:'plugins/macos'
{{ end -}}

ZSH_AUTOSUGGEST_USE_ASYNC=true
ZSH_AUTOSUGGEST_COMPLETION_IGNORE="git *"
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#928374"
ZSH_AUTOSUGGEST_HISTORY_IGNORE="(cd|rm|z) *"

zed load github.com/zsh-users/zsh-autosuggestions

export STARSHIP_CONFIG=~/.config/starship/config.toml
if (( ${+commands[starship]} )); then
  zed load github.com/MunifTanjim/null name:'starship' \
    onpull:'starship init zsh --print-full-init > starship.plugin.zsh'
fi

zed load github.com/zsh-users/zsh-syntax-highlighting \
  pick:'zsh-syntax-highlighting.zsh'

zed done
