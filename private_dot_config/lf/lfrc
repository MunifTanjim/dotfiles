# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set drawbox
set icons
set period 15
set scrolloff 5

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
  case $(file --mime-type -Lb $f) in
    text/*)
      lf -remote "send $id \$$EDITOR \$fx";;
    *)
      for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
  esac
}}

cmd smart-rename ${{
  if [ -n "$fs" ]; then
    count=$(printf "%s\n" $fs | wc -l)
    if [ $count -eq 1 ] && [ -d "$fs" ]; then
      vidir $fs
    else
      printf "%s\n" $fs | vidir -
    fi
    lf -remote "send $id unselect"
  else
    lf -remote "send $id rename"
  fi
}}

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash ${{
  set -f
  clear
  printf "$fx\n"
  printf "\nTrash? [y/n]: "
  read answer
  if [ "$answer" = "y" ]; then
    ~/.config/lf/trash "$fx"
  fi
}}

# define a custom 'delete' command
cmd delete ${{
  set -f
  clear
  printf "$fx\n"
  printf "\nDelete (permanently)? [y/n]: "
  read answer
  if [ "$answer" = "y" ]; then
    rm -rf $fx
  fi
}}

cmd mkdir %{{
  IFS=" "
  mkdir -p -- "$*"
  lf -remote "send $id select \"$*\""
}}

cmd touch %{{
  IFS=" "
  touch -- "$*"
  lf -remote "send $id select \"$*\""
}}

cmd z %{{
  dir="$(zoxide query --exclude "${PWD}" -- "$@")"
  lf -remote "send ${id} cd '${dir}'"
}}

# (xkcd link: https://xkcd.com/1168/)
# extract the current file with the right command
cmd extract ${{
  set -f
  ~/.config/lf/extract "$f"
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
  set -f
  name="${@}"
  ~/.config/lf/compress tar "$name" "$fx"
  lf -remote "send $id unselect"
}}

# compress current file or selected files with zip
cmd zip ${{
  set -f
  name="${@}"
  ~/.config/lf/compress zip "$name" "$fx"
  lf -remote "send $id unselect"
}}

# reload config and refresh ui
cmd refresh :{{
  source "~/.config/lf/lfrc"
  reload
}}

cmd q :quit

set previewer "~/.config/lf/previewer"
map i $~/.config/lf/previewer "$f" | less -R

# set cleaner for supported environment
${{
  if test -z "${TMUX:-}" && test -n "${KITTY_PID:-}"; then
    lf -remote "send $id set cleaner '~/.config/lf/cleaner'"
  fi
}}

set mouse
map <m-down> down
map <m-up> up
map <m-3> :toggle

map e $$EDITOR $f
map i $$PAGER $f
map w $$SHELL

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

map d
map dd cut
map df trash
map dF delete

map r smart-rename

map E extract "$f"

map za set info size:time
map zh set hidden!
map zn set info
map zr set reverse!
map zs set info size
map zt set info time

map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time

map ga push :touch<space>
map gA push :mkdir<space>
map gg top
map gh cd ~
map gq quit
map gr refresh
map gz push :z<space>
map g. set hidden!

map J :toggle; down
map K :toggle; up
map <space> :toggle; down
